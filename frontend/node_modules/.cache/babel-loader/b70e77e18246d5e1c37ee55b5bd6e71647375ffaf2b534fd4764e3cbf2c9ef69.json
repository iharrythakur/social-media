{"ast":null,"code":"var _jsxFileName = \"/Users/harshdeepsingh/Desktop/The Future University- SDE Assignment __ Thapar University/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth } from '../config/firebase';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [userProfile, setUserProfile] = useState(null);\n\n  // Sign up with email and password\n  const signup = async (email, password, userData) => {\n    try {\n      const result = await createUserWithEmailAndPassword(auth, email, password);\n      const idToken = await result.user.getIdToken();\n\n      // Register user in backend\n      const response = await authAPI.register({\n        id_token: idToken,\n        ...userData\n      });\n      const {\n        user,\n        access_token\n      } = response.data;\n\n      // Store token and user data\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUserProfile(user);\n      toast.success('Account created successfully!');\n      return user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Signup error:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to create account');\n      throw error;\n    }\n  };\n\n  // Sign in with email and password\n  const login = async (email, password) => {\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      const idToken = await result.user.getIdToken();\n\n      // Login user in backend\n      const response = await authAPI.login({\n        id_token: idToken\n      });\n      const {\n        user,\n        access_token\n      } = response.data;\n\n      // Store token and user data\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUserProfile(user);\n      toast.success('Logged in successfully!');\n      return user;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Login error:', error);\n      toast.error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to log in');\n      throw error;\n    }\n  };\n\n  // Sign in with Google\n  const signInWithGoogle = async userData => {\n    try {\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n      const idToken = await result.user.getIdToken();\n\n      // Check if user exists in backend\n      const verifyResponse = await authAPI.verifyToken({\n        id_token: idToken\n      });\n      if (verifyResponse.data.exists) {\n        // User exists, login\n        const {\n          user,\n          access_token\n        } = verifyResponse.data;\n        localStorage.setItem('access_token', access_token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUserProfile(user);\n        toast.success('Logged in successfully!');\n        return user;\n      } else {\n        // User doesn't exist, register\n        const registerResponse = await authAPI.register({\n          id_token: idToken,\n          name: result.user.displayName || (userData === null || userData === void 0 ? void 0 : userData.name) || 'Anonymous',\n          profile_picture_url: result.user.photoURL,\n          ...userData\n        });\n        const {\n          user,\n          access_token\n        } = registerResponse.data;\n        localStorage.setItem('access_token', access_token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUserProfile(user);\n        toast.success('Account created successfully!');\n        return user;\n      }\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      toast.error('Failed to sign in with Google');\n      throw error;\n    }\n  };\n\n  // Sign out\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n      setCurrentUser(null);\n      setUserProfile(null);\n      toast.success('Logged out successfully!');\n    } catch (error) {\n      console.error('Logout error:', error);\n      toast.error('Failed to log out');\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async updates => {\n    try {\n      const response = await authAPI.updateCurrentUser(updates);\n      const updatedUser = response.data.user;\n\n      // Update local storage\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUserProfile(updatedUser);\n      toast.success('Profile updated successfully!');\n      return updatedUser;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Update profile error:', error);\n      toast.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to update profile');\n      throw error;\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!currentUser && !!userProfile;\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        // Check if we have stored user data\n        const storedUser = localStorage.getItem('user');\n        const storedToken = localStorage.getItem('access_token');\n        if (storedUser && storedToken) {\n          setUserProfile(JSON.parse(storedUser));\n        } else {\n          // Try to get user profile from backend\n          try {\n            const idToken = await user.getIdToken();\n            const response = await authAPI.verifyToken({\n              id_token: idToken\n            });\n            if (response.data.exists) {\n              const {\n                user: userData,\n                access_token\n              } = response.data;\n              localStorage.setItem('access_token', access_token);\n              localStorage.setItem('user', JSON.stringify(userData));\n              setUserProfile(userData);\n            }\n          } catch (error) {\n            console.error('Failed to get user profile:', error);\n          }\n        }\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    userProfile,\n    signup,\n    login,\n    signInWithGoogle,\n    logout,\n    updateProfile,\n    isAuthenticated,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Xey6YrJimIMNEMMx5vkorAHFkW4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","authAPI","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","userProfile","setUserProfile","signup","email","password","userData","result","idToken","user","getIdToken","response","register","id_token","access_token","data","localStorage","setItem","JSON","stringify","success","error","_error$response","_error$response$data","console","login","_error$response2","_error$response2$data","signInWithGoogle","provider","verifyResponse","verifyToken","exists","registerResponse","name","displayName","profile_picture_url","photoURL","logout","removeItem","updateProfile","updates","updateCurrentUser","updatedUser","_error$response3","_error$response3$data","isAuthenticated","unsubscribe","storedUser","getItem","storedToken","parse","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harshdeepsingh/Desktop/The Future University- SDE Assignment __ Thapar University/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth } from '../config/firebase';\nimport { \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword, \n  signOut, \n  onAuthStateChanged,\n  GoogleAuthProvider,\n  signInWithPopup\n} from 'firebase/auth';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [userProfile, setUserProfile] = useState(null);\n\n  // Sign up with email and password\n  const signup = async (email, password, userData) => {\n    try {\n      const result = await createUserWithEmailAndPassword(auth, email, password);\n      const idToken = await result.user.getIdToken();\n      \n      // Register user in backend\n      const response = await authAPI.register({\n        id_token: idToken,\n        ...userData\n      });\n      \n      const { user, access_token } = response.data;\n      \n      // Store token and user data\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      setUserProfile(user);\n      toast.success('Account created successfully!');\n      \n      return user;\n    } catch (error) {\n      console.error('Signup error:', error);\n      toast.error(error.response?.data?.error || 'Failed to create account');\n      throw error;\n    }\n  };\n\n  // Sign in with email and password\n  const login = async (email, password) => {\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      const idToken = await result.user.getIdToken();\n      \n      // Login user in backend\n      const response = await authAPI.login({\n        id_token: idToken\n      });\n      \n      const { user, access_token } = response.data;\n      \n      // Store token and user data\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      setUserProfile(user);\n      toast.success('Logged in successfully!');\n      \n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error(error.response?.data?.error || 'Failed to log in');\n      throw error;\n    }\n  };\n\n  // Sign in with Google\n  const signInWithGoogle = async (userData) => {\n    try {\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n      const idToken = await result.user.getIdToken();\n      \n      // Check if user exists in backend\n      const verifyResponse = await authAPI.verifyToken({\n        id_token: idToken\n      });\n      \n      if (verifyResponse.data.exists) {\n        // User exists, login\n        const { user, access_token } = verifyResponse.data;\n        localStorage.setItem('access_token', access_token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUserProfile(user);\n        toast.success('Logged in successfully!');\n        return user;\n      } else {\n        // User doesn't exist, register\n        const registerResponse = await authAPI.register({\n          id_token: idToken,\n          name: result.user.displayName || userData?.name || 'Anonymous',\n          profile_picture_url: result.user.photoURL,\n          ...userData\n        });\n        \n        const { user, access_token } = registerResponse.data;\n        localStorage.setItem('access_token', access_token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUserProfile(user);\n        toast.success('Account created successfully!');\n        return user;\n      }\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      toast.error('Failed to sign in with Google');\n      throw error;\n    }\n  };\n\n  // Sign out\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n      setCurrentUser(null);\n      setUserProfile(null);\n      toast.success('Logged out successfully!');\n    } catch (error) {\n      console.error('Logout error:', error);\n      toast.error('Failed to log out');\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (updates) => {\n    try {\n      const response = await authAPI.updateCurrentUser(updates);\n      const updatedUser = response.data.user;\n      \n      // Update local storage\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUserProfile(updatedUser);\n      \n      toast.success('Profile updated successfully!');\n      return updatedUser;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      toast.error(error.response?.data?.error || 'Failed to update profile');\n      throw error;\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!currentUser && !!userProfile;\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setCurrentUser(user);\n      \n      if (user) {\n        // Check if we have stored user data\n        const storedUser = localStorage.getItem('user');\n        const storedToken = localStorage.getItem('access_token');\n        \n        if (storedUser && storedToken) {\n          setUserProfile(JSON.parse(storedUser));\n        } else {\n          // Try to get user profile from backend\n          try {\n            const idToken = await user.getIdToken();\n            const response = await authAPI.verifyToken({ id_token: idToken });\n            \n            if (response.data.exists) {\n              const { user: userData, access_token } = response.data;\n              localStorage.setItem('access_token', access_token);\n              localStorage.setItem('user', JSON.stringify(userData));\n              setUserProfile(userData);\n            }\n          } catch (error) {\n            console.error('Failed to get user profile:', error);\n          }\n        }\n      } else {\n        setUserProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    userProfile,\n    signup,\n    login,\n    signInWithGoogle,\n    logout,\n    updateProfile,\n    isAuthenticated,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SACEC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,OAAO,EACPC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,QACV,eAAe;AACtB,SAASC,OAAO,QAAQ,iBAAiB;AACzC,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,gBAAGf,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMgB,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGjB,UAAU,CAACc,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAM2B,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IAClD,IAAI;MACF,MAAMC,MAAM,GAAG,MAAM3B,8BAA8B,CAACF,IAAI,EAAE0B,KAAK,EAAEC,QAAQ,CAAC;MAC1E,MAAMG,OAAO,GAAG,MAAMD,MAAM,CAACE,IAAI,CAACC,UAAU,CAAC,CAAC;;MAE9C;MACA,MAAMC,QAAQ,GAAG,MAAM1B,OAAO,CAAC2B,QAAQ,CAAC;QACtCC,QAAQ,EAAEL,OAAO;QACjB,GAAGF;MACL,CAAC,CAAC;MAEF,MAAM;QAAEG,IAAI;QAAEK;MAAa,CAAC,GAAGH,QAAQ,CAACI,IAAI;;MAE5C;MACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;MAClDE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;MAElDP,cAAc,CAACO,IAAI,CAAC;MACpBvB,KAAK,CAACkC,OAAO,CAAC,+BAA+B,CAAC;MAE9C,OAAOX,IAAI;IACb,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdC,OAAO,CAACH,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCnC,KAAK,CAACmC,KAAK,CAAC,EAAAC,eAAA,GAAAD,KAAK,CAACV,QAAQ,cAAAW,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,cAAAQ,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI,0BAA0B,CAAC;MACtE,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMI,KAAK,GAAG,MAAAA,CAAOrB,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAME,MAAM,GAAG,MAAM5B,0BAA0B,CAACD,IAAI,EAAE0B,KAAK,EAAEC,QAAQ,CAAC;MACtE,MAAMG,OAAO,GAAG,MAAMD,MAAM,CAACE,IAAI,CAACC,UAAU,CAAC,CAAC;;MAE9C;MACA,MAAMC,QAAQ,GAAG,MAAM1B,OAAO,CAACwC,KAAK,CAAC;QACnCZ,QAAQ,EAAEL;MACZ,CAAC,CAAC;MAEF,MAAM;QAAEC,IAAI;QAAEK;MAAa,CAAC,GAAGH,QAAQ,CAACI,IAAI;;MAE5C;MACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;MAClDE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;MAElDP,cAAc,CAACO,IAAI,CAAC;MACpBvB,KAAK,CAACkC,OAAO,CAAC,yBAAyB,CAAC;MAExC,OAAOX,IAAI;IACb,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA,IAAAK,gBAAA,EAAAC,qBAAA;MACdH,OAAO,CAACH,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCnC,KAAK,CAACmC,KAAK,CAAC,EAAAK,gBAAA,GAAAL,KAAK,CAACV,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBN,KAAK,KAAI,kBAAkB,CAAC;MAC9D,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMO,gBAAgB,GAAG,MAAOtB,QAAQ,IAAK;IAC3C,IAAI;MACF,MAAMuB,QAAQ,GAAG,IAAI9C,kBAAkB,CAAC,CAAC;MACzC,MAAMwB,MAAM,GAAG,MAAMvB,eAAe,CAACN,IAAI,EAAEmD,QAAQ,CAAC;MACpD,MAAMrB,OAAO,GAAG,MAAMD,MAAM,CAACE,IAAI,CAACC,UAAU,CAAC,CAAC;;MAE9C;MACA,MAAMoB,cAAc,GAAG,MAAM7C,OAAO,CAAC8C,WAAW,CAAC;QAC/ClB,QAAQ,EAAEL;MACZ,CAAC,CAAC;MAEF,IAAIsB,cAAc,CAACf,IAAI,CAACiB,MAAM,EAAE;QAC9B;QACA,MAAM;UAAEvB,IAAI;UAAEK;QAAa,CAAC,GAAGgB,cAAc,CAACf,IAAI;QAClDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;QAClDE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;QAClDP,cAAc,CAACO,IAAI,CAAC;QACpBvB,KAAK,CAACkC,OAAO,CAAC,yBAAyB,CAAC;QACxC,OAAOX,IAAI;MACb,CAAC,MAAM;QACL;QACA,MAAMwB,gBAAgB,GAAG,MAAMhD,OAAO,CAAC2B,QAAQ,CAAC;UAC9CC,QAAQ,EAAEL,OAAO;UACjB0B,IAAI,EAAE3B,MAAM,CAACE,IAAI,CAAC0B,WAAW,KAAI7B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE4B,IAAI,KAAI,WAAW;UAC9DE,mBAAmB,EAAE7B,MAAM,CAACE,IAAI,CAAC4B,QAAQ;UACzC,GAAG/B;QACL,CAAC,CAAC;QAEF,MAAM;UAAEG,IAAI;UAAEK;QAAa,CAAC,GAAGmB,gBAAgB,CAAClB,IAAI;QACpDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;QAClDE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;QAClDP,cAAc,CAACO,IAAI,CAAC;QACpBvB,KAAK,CAACkC,OAAO,CAAC,+BAA+B,CAAC;QAC9C,OAAOX,IAAI;MACb;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CnC,KAAK,CAACmC,KAAK,CAAC,+BAA+B,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMiB,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMzD,OAAO,CAACH,IAAI,CAAC;MACnBsC,YAAY,CAACuB,UAAU,CAAC,cAAc,CAAC;MACvCvB,YAAY,CAACuB,UAAU,CAAC,MAAM,CAAC;MAC/BzC,cAAc,CAAC,IAAI,CAAC;MACpBI,cAAc,CAAC,IAAI,CAAC;MACpBhB,KAAK,CAACkC,OAAO,CAAC,0BAA0B,CAAC;IAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCnC,KAAK,CAACmC,KAAK,CAAC,mBAAmB,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMmB,aAAa,GAAG,MAAOC,OAAO,IAAK;IACvC,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAM1B,OAAO,CAACyD,iBAAiB,CAACD,OAAO,CAAC;MACzD,MAAME,WAAW,GAAGhC,QAAQ,CAACI,IAAI,CAACN,IAAI;;MAEtC;MACAO,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACwB,WAAW,CAAC,CAAC;MACzDzC,cAAc,CAACyC,WAAW,CAAC;MAE3BzD,KAAK,CAACkC,OAAO,CAAC,+BAA+B,CAAC;MAC9C,OAAOuB,WAAW;IACpB,CAAC,CAAC,OAAOtB,KAAK,EAAE;MAAA,IAAAuB,gBAAA,EAAAC,qBAAA;MACdrB,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CnC,KAAK,CAACmC,KAAK,CAAC,EAAAuB,gBAAA,GAAAvB,KAAK,CAACV,QAAQ,cAAAiC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7B,IAAI,cAAA8B,qBAAA,uBAApBA,qBAAA,CAAsBxB,KAAK,KAAI,0BAA0B,CAAC;MACtE,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMyB,eAAe,GAAGA,CAAA,KAAM;IAC5B,OAAO,CAAC,CAACjD,WAAW,IAAI,CAAC,CAACI,WAAW;EACvC,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACd,MAAMsE,WAAW,GAAGjE,kBAAkB,CAACJ,IAAI,EAAE,MAAO+B,IAAI,IAAK;MAC3DX,cAAc,CAACW,IAAI,CAAC;MAEpB,IAAIA,IAAI,EAAE;QACR;QACA,MAAMuC,UAAU,GAAGhC,YAAY,CAACiC,OAAO,CAAC,MAAM,CAAC;QAC/C,MAAMC,WAAW,GAAGlC,YAAY,CAACiC,OAAO,CAAC,cAAc,CAAC;QAExD,IAAID,UAAU,IAAIE,WAAW,EAAE;UAC7BhD,cAAc,CAACgB,IAAI,CAACiC,KAAK,CAACH,UAAU,CAAC,CAAC;QACxC,CAAC,MAAM;UACL;UACA,IAAI;YACF,MAAMxC,OAAO,GAAG,MAAMC,IAAI,CAACC,UAAU,CAAC,CAAC;YACvC,MAAMC,QAAQ,GAAG,MAAM1B,OAAO,CAAC8C,WAAW,CAAC;cAAElB,QAAQ,EAAEL;YAAQ,CAAC,CAAC;YAEjE,IAAIG,QAAQ,CAACI,IAAI,CAACiB,MAAM,EAAE;cACxB,MAAM;gBAAEvB,IAAI,EAAEH,QAAQ;gBAAEQ;cAAa,CAAC,GAAGH,QAAQ,CAACI,IAAI;cACtDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;cAClDE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACb,QAAQ,CAAC,CAAC;cACtDJ,cAAc,CAACI,QAAQ,CAAC;YAC1B;UACF,CAAC,CAAC,OAAOe,KAAK,EAAE;YACdG,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACrD;QACF;MACF,CAAC,MAAM;QACLnB,cAAc,CAAC,IAAI,CAAC;MACtB;MAEAF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO+C,WAAW;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAG;IACZvD,WAAW;IACXI,WAAW;IACXE,MAAM;IACNsB,KAAK;IACLG,gBAAgB;IAChBU,MAAM;IACNE,aAAa;IACbM,eAAe;IACf/C;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACgE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzD,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAA2D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAC7D,GAAA,CAtMWF,YAAY;AAAAgE,EAAA,GAAZhE,YAAY;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}